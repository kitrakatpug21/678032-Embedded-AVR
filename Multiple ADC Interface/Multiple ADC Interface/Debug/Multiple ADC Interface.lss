
Multiple ADC Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000742  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000623  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002da  00000000  00000000  00000f49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001224  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035a  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b1  00000000  00000000  000015c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001673  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_Init>:
#define F_CPU 8000000UL
#include <util/delay.h>

void ADC_Init(uint8_t channel)
{
	ADMUX = 0b01000000;
  6c:	90 e4       	ldi	r25, 0x40	; 64
  6e:	97 b9       	out	0x07, r25	; 7
	ADCSRA = 0b10000110;// basic setup
  70:	96 e8       	ldi	r25, 0x86	; 134
  72:	96 b9       	out	0x06, r25	; 6
	ADMUX = ADMUX | channel;
  74:	97 b1       	in	r25, 0x07	; 7
  76:	89 2b       	or	r24, r25
  78:	87 b9       	out	0x07, r24	; 7
  7a:	08 95       	ret

0000007c <ADC_Result>:
}

void ADC_Result()
{
	ADCSRA = ADCSRA | (0b01000000);// ADD Start bit on existing ADCSRA Value
  7c:	86 b1       	in	r24, 0x06	; 6
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	86 b9       	out	0x06, r24	; 6
	while ((ADCSRA & (1<<4))==0)
  82:	34 9b       	sbis	0x06, 4	; 6
  84:	fe cf       	rjmp	.-4      	; 0x82 <ADC_Result+0x6>
	{
		//wait till conversion completes
	}
	PORTC = ADCL;
  86:	84 b1       	in	r24, 0x04	; 4
  88:	85 bb       	out	0x15, r24	; 21
	PORTD = ADCH;
  8a:	85 b1       	in	r24, 0x05	; 5
  8c:	82 bb       	out	0x12, r24	; 18
  8e:	08 95       	ret

00000090 <main>:
}

int main(void)
{
	DDRC = 0b11111111;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b00000011;
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	81 bb       	out	0x11, r24	; 17
	while (1)
	{
		ADC_Init(0);
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Init>
		ADC_Result();
  9e:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_Result>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	89 e6       	ldi	r24, 0x69	; 105
  a6:	98 e1       	ldi	r25, 0x18	; 24
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x18>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x22>
  b2:	00 00       	nop
		_delay_ms(1000);
		ADC_Init(4);
  b4:	84 e0       	ldi	r24, 0x04	; 4
  b6:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Init>
		ADC_Result();
  ba:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_Result>
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	89 e6       	ldi	r24, 0x69	; 105
  c2:	98 e1       	ldi	r25, 0x18	; 24
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x34>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x3e>
  ce:	00 00       	nop
		_delay_ms(1000);
		ADC_Init(7);
  d0:	87 e0       	ldi	r24, 0x07	; 7
  d2:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Init>
		ADC_Result();
  d6:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_Result>
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	89 e6       	ldi	r24, 0x69	; 105
  de:	98 e1       	ldi	r25, 0x18	; 24
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x50>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x5a>
  ea:	00 00       	nop
  ec:	d5 cf       	rjmp	.-86     	; 0x98 <main+0x8>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
