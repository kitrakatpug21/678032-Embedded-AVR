
SPI-Master (Switch Controlled).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000065d  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ca  00000000  00000000  00000825  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bd  00000000  00000000  00000def  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000358  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000af  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0b10100000;
  76:	80 ea       	ldi	r24, 0xA0	; 160
  78:	87 bb       	out	0x17, r24	; 23
	SPCR = 0b01010000;
  7a:	80 e5       	ldi	r24, 0x50	; 80
  7c:	8d b9       	out	0x0d, r24	; 13
	DDRA = 0b00000011;
  7e:	83 e0       	ldi	r24, 0x03	; 3
  80:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0b00000011;
  82:	81 bb       	out	0x11, r24	; 17
	volatile uint8_t temp;
	PORTA = 0b00000011;
  84:	8b bb       	out	0x1b, r24	; 27
	PORTD = 0b00000011;
  86:	82 bb       	out	0x12, r24	; 18
	uint8_t data = 0;
  88:	80 e0       	ldi	r24, 0x00	; 0
	while (1)
	{
		if (PINC & 0b00000001)
  8a:	98 9b       	sbis	0x13, 0	; 19
  8c:	05 c0       	rjmp	.+10     	; 0x98 <main+0x2c>
		{
			PORTA = 0b00000010;// SLAVE-1 is ON SLAVE-2 is OFF
  8e:	92 e0       	ldi	r25, 0x02	; 2
  90:	9b bb       	out	0x1b, r25	; 27
			PORTD = 0b00000011;// SLAVE-3 is OFF SLAVE-4 is OFF
  92:	93 e0       	ldi	r25, 0x03	; 3
  94:	92 bb       	out	0x12, r25	; 18
  96:	14 c0       	rjmp	.+40     	; 0xc0 <main+0x54>
		}
		else if (PINC & 0b00000010)
  98:	99 9b       	sbis	0x13, 1	; 19
  9a:	05 c0       	rjmp	.+10     	; 0xa6 <main+0x3a>
		{
			PORTA = 0b00000001;// SLAVE-1 is OFF SLAVE-2 is ON
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	9b bb       	out	0x1b, r25	; 27
			PORTD = 0b00000011;// SLAVE-3 is OFF SLAVE-4 is OFF
  a0:	93 e0       	ldi	r25, 0x03	; 3
  a2:	92 bb       	out	0x12, r25	; 18
  a4:	0d c0       	rjmp	.+26     	; 0xc0 <main+0x54>
		}
		else if (PINC & 0b00000100)
  a6:	9a 9b       	sbis	0x13, 2	; 19
  a8:	05 c0       	rjmp	.+10     	; 0xb4 <main+0x48>
		{
			PORTA = 0b00000011;// SLAVE-1 is OFF SLAVE-2 is OFF
  aa:	93 e0       	ldi	r25, 0x03	; 3
  ac:	9b bb       	out	0x1b, r25	; 27
			PORTD = 0b00000010;// SLAVE-3 is ON SLAVE-4 is OFF
  ae:	92 e0       	ldi	r25, 0x02	; 2
  b0:	92 bb       	out	0x12, r25	; 18
  b2:	06 c0       	rjmp	.+12     	; 0xc0 <main+0x54>
		}
		else if (PINC & 0b00001000)
  b4:	9b 9b       	sbis	0x13, 3	; 19
  b6:	04 c0       	rjmp	.+8      	; 0xc0 <main+0x54>
		{
			PORTA = 0b00000011;// SLAVE-1 is OFF SLAVE-2 is OFF
  b8:	93 e0       	ldi	r25, 0x03	; 3
  ba:	9b bb       	out	0x1b, r25	; 27
			PORTD = 0b00000001;// SLAVE-3 is OFF SLAVE-4 is ON
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	92 bb       	out	0x12, r25	; 18
		}
		SPDR = data;
  c0:	8f b9       	out	0x0f, r24	; 15
		while ((SPSR & 0b10000000) == 0)
  c2:	77 9b       	sbis	0x0e, 7	; 14
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <main+0x56>
		{
				// wait here till the SPIF bit == 1
		}
			// now clear the status bits
			temp = SPSR;// first read the SPSR bit
  c6:	9e b1       	in	r25, 0x0e	; 14
  c8:	99 83       	std	Y+1, r25	; 0x01
			temp = SPDR;// then read the SPDR register
  ca:	9f b1       	in	r25, 0x0f	; 15
  cc:	99 83       	std	Y+1, r25	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	39 e6       	ldi	r19, 0x69	; 105
  d2:	98 e1       	ldi	r25, 0x18	; 24
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	30 40       	sbci	r19, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x68>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x72>
  de:	00 00       	nop
			_delay_ms(1000);
		data = data + 1;
  e0:	8f 5f       	subi	r24, 0xFF	; 255
	}
  e2:	d3 cf       	rjmp	.-90     	; 0x8a <main+0x1e>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
