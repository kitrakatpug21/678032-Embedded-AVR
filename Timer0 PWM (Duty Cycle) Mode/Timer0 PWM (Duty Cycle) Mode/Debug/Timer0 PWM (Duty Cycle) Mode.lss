
Timer0 PWM (Duty Cycle) Mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a1  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cc  00000000  00000000  00000851  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000290  00000000  00000000  00000e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034a  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  0000141e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 8000000UL
#include <util/delay.h>
int main(void)
{
	//TCCR0 = 0b01111101;// PWM Mode (Set OC0 on compare match, clear OC0 at BOTTOM) Prescale by 1024
	TCCR0 = 0b01101101;// PWM Mode (Clear OC0 on compare match, set OC0 at BOTTOM) Prescale by 1024
  6c:	8d e6       	ldi	r24, 0x6D	; 109
  6e:	83 bf       	out	0x33, r24	; 51
	DDRB = 0b00001000;
  70:	88 e0       	ldi	r24, 0x08	; 8
  72:	87 bb       	out	0x17, r24	; 23
	TCNT0 = 0;
  74:	12 be       	out	0x32, r1	; 50
	OCR0 = 0;
  76:	1c be       	out	0x3c, r1	; 60
	while (1)
	{
		for (int i = 0; i <= 255; i = i+1)
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	0e c0       	rjmp	.+28     	; 0x9a <main+0x2e>
		{
			OCR0 = i;
  7e:	8c bf       	out	0x3c, r24	; 60
			while ((TIFR & 0b00000001)==0)
  80:	08 b6       	in	r0, 0x38	; 56
  82:	00 fe       	sbrs	r0, 0
  84:	fd cf       	rjmp	.-6      	; 0x80 <main+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f ef       	ldi	r18, 0xFF	; 255
  88:	30 e7       	ldi	r19, 0x70	; 112
  8a:	42 e0       	ldi	r20, 0x02	; 2
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	30 40       	sbci	r19, 0x00	; 0
  90:	40 40       	sbci	r20, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <main+0x20>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x2a>
  96:	00 00       	nop
	DDRB = 0b00001000;
	TCNT0 = 0;
	OCR0 = 0;
	while (1)
	{
		for (int i = 0; i <= 255; i = i+1)
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	8f 3f       	cpi	r24, 0xFF	; 255
  9c:	91 05       	cpc	r25, r1
  9e:	79 f3       	breq	.-34     	; 0x7e <main+0x12>
  a0:	74 f3       	brlt	.-36     	; 0x7e <main+0x12>
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e c0       	rjmp	.+28     	; 0xc4 <main+0x58>
			}
			_delay_ms(100);
		}
		for (int i = 255; i >= 0; i = i-1)
		{
			OCR0 = i;
  a8:	8c bf       	out	0x3c, r24	; 60
			while ((TIFR & 0b00000001)==0)
  aa:	08 b6       	in	r0, 0x38	; 56
  ac:	00 fe       	sbrs	r0, 0
  ae:	fd cf       	rjmp	.-6      	; 0xaa <main+0x3e>
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	30 e7       	ldi	r19, 0x70	; 112
  b4:	42 e0       	ldi	r20, 0x02	; 2
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
  ba:	40 40       	sbci	r20, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x4a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x54>
  c0:	00 00       	nop
			{
				// wait here till TOP is reached
			}
			_delay_ms(100);
		}
		for (int i = 255; i >= 0; i = i-1)
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	99 23       	and	r25, r25
  c6:	84 f7       	brge	.-32     	; 0xa8 <main+0x3c>
  c8:	d7 cf       	rjmp	.-82     	; 0x78 <main+0xc>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
