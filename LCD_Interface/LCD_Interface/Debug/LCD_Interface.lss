
LCD_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000210  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b6d  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000662  00000000  00000000  00000eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000404  00000000  00000000  0000151b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001920  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000358  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000459  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002141  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  7a:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Config>:
#include <util/delay.h>

void LCD_Config(uint8_t cmd)
{
	// 1. Set RS Pin to 0
	PORTC = 0b00000000;
  82:	15 ba       	out	0x15, r1	; 21
	// 2. Load the Data on PORTD
	PORTD = cmd;
  84:	82 bb       	out	0x12, r24	; 18
	// 3. Create a Positive Edge Signal On EN Pin
	PORTC = 0b00000010;
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f e1       	ldi	r24, 0x1F	; 31
  8c:	9e e4       	ldi	r25, 0x4E	; 78
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <LCD_Config+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <LCD_Config+0x12>
  94:	00 00       	nop
	_delay_ms(10);
	PORTC = 0b00000000;
  96:	15 ba       	out	0x15, r1	; 21
  98:	8f e1       	ldi	r24, 0x1F	; 31
  9a:	9e e4       	ldi	r25, 0x4E	; 78
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_Config+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_Config+0x20>
  a2:	00 00       	nop
  a4:	08 95       	ret

000000a6 <LCD_Alphabet>:
	_delay_ms(10);
}
void LCD_Alphabet(char ch)
{
	// 1. Set RS Pin to 1
	PORTC = 0b00000001;
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	95 bb       	out	0x15, r25	; 21
	// 2. Load the Data on PORTD
	PORTD = ch;
  aa:	82 bb       	out	0x12, r24	; 18
	// 3. Create a Positive Edge Signal On EN Pin
	PORTC = 0b00000011;
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	85 bb       	out	0x15, r24	; 21
  b0:	ef e1       	ldi	r30, 0x1F	; 31
  b2:	fe e4       	ldi	r31, 0x4E	; 78
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_Alphabet+0xe>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_Alphabet+0x14>
  ba:	00 00       	nop
	_delay_ms(10);
	PORTC = 0b00000001;
  bc:	95 bb       	out	0x15, r25	; 21
  be:	8f e1       	ldi	r24, 0x1F	; 31
  c0:	9e e4       	ldi	r25, 0x4E	; 78
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_Alphabet+0x1c>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_Alphabet+0x22>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <LCD_Start>:
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	82 e5       	ldi	r24, 0x52	; 82
  d0:	97 e0       	ldi	r25, 0x07	; 7
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <LCD_Start+0x6>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCD_Start+0x10>
  dc:	00 00       	nop
}

void LCD_Start()
{
	_delay_ms(300);// LCD Require 300ms to POWER ON
	LCD_Config(0x38);
  de:	88 e3       	ldi	r24, 0x38	; 56
  e0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
	/*
	0x38 ->	LCD will perform operation as 8-bit 2 row 16 character mode
	0x30 -> LCD will perform operation as 8-bit 1 row 16 character mode
	*/
	LCD_Config(0x06);
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
	/*
	0x06 ->	LCD will write characters from LEFT to RIGHT
	0x04 -> LCD will write characters from RIGHT to LEFT
	*/
	LCD_Config(0x0C);
  ea:	8c e0       	ldi	r24, 0x0C	; 12
  ec:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
	/*
	0x0C ->	LCD will have No Cursor
	0x0E -> LCD will have _ cursor
	0x0F -> LCD will have blinky | cursor
	*/
	LCD_Config(0x01);	// to clear any garbage values on LCD Display
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
  f6:	8f e1       	ldi	r24, 0x1F	; 31
  f8:	9e e4       	ldi	r25, 0x4E	; 78
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Start+0x2e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_Start+0x34>
 100:	00 00       	nop
 102:	08 95       	ret

00000104 <LCD_print>:
	_delay_ms(10);
}

void LCD_print(char *str)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	ec 01       	movw	r28, r24
	while (*str != '\0')
 10a:	03 c0       	rjmp	.+6      	; 0x112 <LCD_print+0xe>
	{
		LCD_Alphabet(*str);
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Alphabet>
		str++;
 110:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(10);
}

void LCD_print(char *str)
{
	while (*str != '\0')
 112:	88 81       	ld	r24, Y
 114:	81 11       	cpse	r24, r1
 116:	fa cf       	rjmp	.-12     	; 0x10c <LCD_print+0x8>
	{
		LCD_Alphabet(*str);
		str++;
	}
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <main>:

int main(void)
{
	DDRC = 0b00000011;	//  EN RS
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11111111;	// D7..D0
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	81 bb       	out	0x11, r24	; 17
	LCD_Start();
 126:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Start>
    while (1) 
    {
		LCD_Config(0x8F);LCD_Config(0x04);
 12a:	8f e8       	ldi	r24, 0x8F	; 143
 12c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
		LCD_print("NIMANSHU");
 136:	80 e6       	ldi	r24, 0x60	; 96
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 82 00 	call	0x104	; 0x104 <LCD_print>
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	89 e6       	ldi	r24, 0x69	; 105
 142:	98 e1       	ldi	r25, 0x18	; 24
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x26>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x30>
 14e:	00 00       	nop
		//LCD_Alphabet('R');LCD_Alphabet('A');LCD_Alphabet('H');LCD_Alphabet('U');LCD_Alphabet('L');
		_delay_ms(1000);
		LCD_Config(0x01); _delay_ms(10);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
 156:	8f e1       	ldi	r24, 0x1F	; 31
 158:	9e e4       	ldi	r25, 0x4E	; 78
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0x3c>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x42>
 160:	00 00       	nop
		LCD_Config(0xCF);LCD_Config(0x04);
 162:	8f ec       	ldi	r24, 0xCF	; 207
 164:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
		//LCD_Alphabet('P');LCD_Alphabet('A');LCD_Alphabet('W');LCD_Alphabet('A');LCD_Alphabet('N');
		LCD_print("LAPOG");
 16e:	89 e6       	ldi	r24, 0x69	; 105
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 82 00 	call	0x104	; 0x104 <LCD_print>
 176:	9f ef       	ldi	r25, 0xFF	; 255
 178:	29 e6       	ldi	r18, 0x69	; 105
 17a:	88 e1       	ldi	r24, 0x18	; 24
 17c:	91 50       	subi	r25, 0x01	; 1
 17e:	20 40       	sbci	r18, 0x00	; 0
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x5e>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x68>
 186:	00 00       	nop
		_delay_ms(1000);
		LCD_Config(0x01); _delay_ms(10);
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x74>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x7a>
 198:	00 00       	nop
		LCD_Config(0x88);LCD_Config(0x04);
 19a:	88 e8       	ldi	r24, 0x88	; 136
 19c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
 1a0:	84 e0       	ldi	r24, 0x04	; 4
 1a2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
		LCD_print("NUJRA");
 1a6:	8f e6       	ldi	r24, 0x6F	; 111
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 82 00 	call	0x104	; 0x104 <LCD_print>
 1ae:	9f ef       	ldi	r25, 0xFF	; 255
 1b0:	29 e6       	ldi	r18, 0x69	; 105
 1b2:	88 e1       	ldi	r24, 0x18	; 24
 1b4:	91 50       	subi	r25, 0x01	; 1
 1b6:	20 40       	sbci	r18, 0x00	; 0
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x96>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0xa0>
 1be:	00 00       	nop
		//LCD_Alphabet('R');LCD_Alphabet('A');LCD_Alphabet('H');LCD_Alphabet('U');LCD_Alphabet('L');
		_delay_ms(1000);
		LCD_Config(0x01); _delay_ms(10);
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
 1c6:	8f e1       	ldi	r24, 0x1F	; 31
 1c8:	9e e4       	ldi	r25, 0x4E	; 78
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0xac>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0xb2>
 1d0:	00 00       	nop
		LCD_Config(0xC8);LCD_Config(0x04);
 1d2:	88 ec       	ldi	r24, 0xC8	; 200
 1d4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
 1d8:	84 e0       	ldi	r24, 0x04	; 4
 1da:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
		//LCD_Alphabet('P');LCD_Alphabet('A');LCD_Alphabet('W');LCD_Alphabet('A');LCD_Alphabet('N');
		LCD_print("KUNAL");
 1de:	85 e7       	ldi	r24, 0x75	; 117
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 82 00 	call	0x104	; 0x104 <LCD_print>
 1e6:	9f ef       	ldi	r25, 0xFF	; 255
 1e8:	29 e6       	ldi	r18, 0x69	; 105
 1ea:	88 e1       	ldi	r24, 0x18	; 24
 1ec:	91 50       	subi	r25, 0x01	; 1
 1ee:	20 40       	sbci	r18, 0x00	; 0
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0xce>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0xd8>
 1f6:	00 00       	nop
		_delay_ms(1000);
		LCD_Config(0x01); _delay_ms(10);
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
 1fe:	8f e1       	ldi	r24, 0x1F	; 31
 200:	9e e4       	ldi	r25, 0x4E	; 78
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 206:	00 c0       	rjmp	.+0      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 208:	00 00       	nop
 20a:	8f cf       	rjmp	.-226    	; 0x12a <main+0xc>

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
