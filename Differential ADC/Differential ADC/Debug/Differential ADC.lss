
Differential ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000065b  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cf  00000000  00000000  000007ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000272  00000000  00000000  00000dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001030  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033d  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000013a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 40 00 	call	0x80	; 0x80 <main>
  64:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_Result>:
#define F_CPU 8000000UL
#include <util/delay.h>

void ADC_Result()
{
	ADCSRA = ADCSRA | 0b01000000;// start of conv
  6c:	86 b1       	in	r24, 0x06	; 6
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA & (1<<4))==0)
  72:	34 9b       	sbis	0x06, 4	; 6
  74:	fe cf       	rjmp	.-4      	; 0x72 <ADC_Result+0x6>
	{
		// until the ADIF is 1, wait here
	}
	PORTC = ADCL;
  76:	84 b1       	in	r24, 0x04	; 4
  78:	85 bb       	out	0x15, r24	; 21
	PORTD = ADCH;
  7a:	85 b1       	in	r24, 0x05	; 5
  7c:	82 bb       	out	0x12, r24	; 18
  7e:	08 95       	ret

00000080 <main>:
}

int main(void)
{
	ADMUX = 0b01010000;// ADC0-> Vin	ADC1-> Vdiff
  80:	80 e5       	ldi	r24, 0x50	; 80
  82:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110;
  84:	86 e8       	ldi	r24, 0x86	; 134
  86:	86 b9       	out	0x06, r24	; 6
	DDRC = 0b11111111;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b00000011;
  8c:	83 e0       	ldi	r24, 0x03	; 3
  8e:	81 bb       	out	0x11, r24	; 17
	while (1)
	{
		ADC_Result();
  90:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Result>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	80 e7       	ldi	r24, 0x70	; 112
  98:	92 e0       	ldi	r25, 0x02	; 2
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x1a>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x24>
  a4:	00 00       	nop
  a6:	f4 cf       	rjmp	.-24     	; 0x90 <main+0x10>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
