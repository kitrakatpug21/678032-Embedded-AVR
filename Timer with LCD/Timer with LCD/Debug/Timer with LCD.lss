
Timer with LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  000001bc  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000902  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000647  00000000  00000000  00000c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003cd  00000000  00000000  00001271  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035a  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000219  00000000  00000000  00001a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001c23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3a       	cpi	r26, 0xAC	; 172
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  7a:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Config>:
#include <util/delay.h>

void LCD_Config(uint8_t cmd)
{
	// 1. Set RS Pin to 0
	PORTC = 0b00000000;
  82:	15 ba       	out	0x15, r1	; 21
	// 2. Load the Data on PORTD
	PORTD = cmd;
  84:	82 bb       	out	0x12, r24	; 18
	// 3. Create a Positive Edge Signal On EN Pin
	PORTC = 0b00000010;
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f e1       	ldi	r24, 0x1F	; 31
  8c:	9e e4       	ldi	r25, 0x4E	; 78
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <LCD_Config+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <LCD_Config+0x12>
  94:	00 00       	nop
	_delay_ms(10);
	PORTC = 0b00000000;
  96:	15 ba       	out	0x15, r1	; 21
  98:	8f e1       	ldi	r24, 0x1F	; 31
  9a:	9e e4       	ldi	r25, 0x4E	; 78
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_Config+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_Config+0x20>
  a2:	00 00       	nop
  a4:	08 95       	ret

000000a6 <LCD_Alphabet>:
	_delay_ms(10);
}
void LCD_Alphabet(char ch)
{
	// 1. Set RS Pin to 1
	PORTC = 0b00000001;
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	95 bb       	out	0x15, r25	; 21
	// 2. Load the Data on PORTD
	PORTD = ch;
  aa:	82 bb       	out	0x12, r24	; 18
	// 3. Create a Positive Edge Signal On EN Pin
	PORTC = 0b00000011;
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	85 bb       	out	0x15, r24	; 21
  b0:	ef e1       	ldi	r30, 0x1F	; 31
  b2:	fe e4       	ldi	r31, 0x4E	; 78
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_Alphabet+0xe>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_Alphabet+0x14>
  ba:	00 00       	nop
	_delay_ms(10);
	PORTC = 0b00000001;
  bc:	95 bb       	out	0x15, r25	; 21
  be:	8f e1       	ldi	r24, 0x1F	; 31
  c0:	9e e4       	ldi	r25, 0x4E	; 78
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_Alphabet+0x1c>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_Alphabet+0x22>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <LCD_Start>:
	_delay_ms(10);
}

void LCD_Start()
{
	DDRC = 0b00000011;
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11111111;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 bb       	out	0x11, r24	; 17
	//_delay_ms(300);// LCD Require 300ms to POWER ON
	LCD_Config(0x38);
  d4:	88 e3       	ldi	r24, 0x38	; 56
  d6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
	/*
	0x38 ->	LCD will perform operation as 8-bit 2 row 16 character mode
	0x30 -> LCD will perform operation as 8-bit 1 row 16 character mode
	*/
	LCD_Config(0x06);
  da:	86 e0       	ldi	r24, 0x06	; 6
  dc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
	/*
	0x06 ->	LCD will write characters from LEFT to RIGHT
	0x04 -> LCD will write characters from RIGHT to LEFT
	*/
	LCD_Config(0x0C);
  e0:	8c e0       	ldi	r24, 0x0C	; 12
  e2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
	/*
	0x0C ->	LCD will have No Cursor
	0x0E -> LCD will have _ cursor
	0x0F -> LCD will have blinky | cursor
	*/
	LCD_Config(0x01);	// to clear any garbage values on LCD Display
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
  ec:	8f e1       	ldi	r24, 0x1F	; 31
  ee:	9e e4       	ldi	r25, 0x4E	; 78
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCD_Start+0x24>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_Start+0x2a>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <LCD_print>:
	_delay_ms(10);
}

void LCD_print(char *str)
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
	while (*str != '\0')
 100:	03 c0       	rjmp	.+6      	; 0x108 <LCD_print+0xe>
	{
		LCD_Alphabet(*str);
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Alphabet>
		str++;
 106:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(10);
}

void LCD_print(char *str)
{
	while (*str != '\0')
 108:	88 81       	ld	r24, Y
 10a:	81 11       	cpse	r24, r1
 10c:	fa cf       	rjmp	.-12     	; 0x102 <LCD_print+0x8>
	{
		LCD_Alphabet(*str);
		str++;
	}
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <main>:
int main(void)
{
	//TCCR0 = 0b00011001;// CTC Mode (Toggle) Prescale by 1
	DDRB = 0b00001000;
 114:	88 e0       	ldi	r24, 0x08	; 8
 116:	87 bb       	out	0x17, r24	; 23
	//TCNT0 = 0;
	//OCR0 = 1;
	LCD_Start();
 118:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Start>
	LCD_Config(0x80);
 11c:	80 e8       	ldi	r24, 0x80	; 128
 11e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
	LCD_print("HELLO");
 122:	80 e6       	ldi	r24, 0x60	; 96
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_print>
	while (1)
	{
		if (PINA & 0b00000001)
 12a:	c8 9b       	sbis	0x19, 0	; 25
 12c:	0e c0       	rjmp	.+28     	; 0x14a <main+0x36>
		{
			TCCR0 = 0;// turn timer off
 12e:	13 be       	out	0x33, r1	; 51
			LCD_Config(0x80);
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
			LCD_print("Frequency: 10us  ");
 136:	86 e6       	ldi	r24, 0x66	; 102
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_print>
			TCCR0 = 0b00011001;// CTC Mode (Toggle) Prescale by 1
 13e:	89 e1       	ldi	r24, 0x19	; 25
 140:	83 bf       	out	0x33, r24	; 51
			TCNT0 = 0;
 142:	12 be       	out	0x32, r1	; 50
			OCR0 = 50;
 144:	82 e3       	ldi	r24, 0x32	; 50
 146:	8c bf       	out	0x3c, r24	; 60
 148:	2f c0       	rjmp	.+94     	; 0x1a8 <main+0x94>
		}
		else if (PINA & 0b00000010)
 14a:	c9 9b       	sbis	0x19, 1	; 25
 14c:	0e c0       	rjmp	.+28     	; 0x16a <main+0x56>
		{
			TCCR0 = 0;// turn timer off
 14e:	13 be       	out	0x33, r1	; 51
			LCD_Config(0x80);
 150:	80 e8       	ldi	r24, 0x80	; 128
 152:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
			LCD_print("Frequency: 40us  ");
 156:	88 e7       	ldi	r24, 0x78	; 120
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_print>
			TCCR0 = 0b00011001;// CTC Mode (Toggle) Prescale by 1
 15e:	89 e1       	ldi	r24, 0x19	; 25
 160:	83 bf       	out	0x33, r24	; 51
			TCNT0 = 0;
 162:	12 be       	out	0x32, r1	; 50
			OCR0 = 200;
 164:	88 ec       	ldi	r24, 0xC8	; 200
 166:	8c bf       	out	0x3c, r24	; 60
 168:	1f c0       	rjmp	.+62     	; 0x1a8 <main+0x94>
		}
		else if (PINA & 0b00000100)
 16a:	ca 9b       	sbis	0x19, 2	; 25
 16c:	0e c0       	rjmp	.+28     	; 0x18a <main+0x76>
		{
			TCCR0 = 0;// turn timer off
 16e:	13 be       	out	0x33, r1	; 51
			LCD_Config(0x80);
 170:	80 e8       	ldi	r24, 0x80	; 128
 172:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
			LCD_print("Frequency: 160us");
 176:	8a e8       	ldi	r24, 0x8A	; 138
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_print>
			TCCR0 = 0b00011010;// CTC Mode (Toggle) Prescale by 8
 17e:	8a e1       	ldi	r24, 0x1A	; 26
 180:	83 bf       	out	0x33, r24	; 51
			TCNT0 = 0;
 182:	12 be       	out	0x32, r1	; 50
			OCR0 = 100;
 184:	84 e6       	ldi	r24, 0x64	; 100
 186:	8c bf       	out	0x3c, r24	; 60
 188:	0f c0       	rjmp	.+30     	; 0x1a8 <main+0x94>
		}
		else if (PINA & 0b00001000)
 18a:	cb 9b       	sbis	0x19, 3	; 25
 18c:	0d c0       	rjmp	.+26     	; 0x1a8 <main+0x94>
		{
			TCCR0 = 0;// turn timer off
 18e:	13 be       	out	0x33, r1	; 51
			LCD_Config(0x80);
 190:	80 e8       	ldi	r24, 0x80	; 128
 192:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Config>
			LCD_print("Frequency: 320us");
 196:	8b e9       	ldi	r24, 0x9B	; 155
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_print>
			TCCR0 = 0b00011011;// CTC Mode (Toggle) Prescale by 16
 19e:	8b e1       	ldi	r24, 0x1B	; 27
 1a0:	83 bf       	out	0x33, r24	; 51
			TCNT0 = 0;
 1a2:	12 be       	out	0x32, r1	; 50
			OCR0 = 100;
 1a4:	84 e6       	ldi	r24, 0x64	; 100
 1a6:	8c bf       	out	0x3c, r24	; 60
		}
		if (TCCR0 != 0)
 1a8:	83 b7       	in	r24, 0x33	; 51
 1aa:	88 23       	and	r24, r24
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <main+0x9c>
 1ae:	bd cf       	rjmp	.-134    	; 0x12a <main+0x16>
		{
			while ((TIFR & 0b00000010)==0)
 1b0:	08 b6       	in	r0, 0x38	; 56
 1b2:	01 fe       	sbrs	r0, 1
 1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <main+0x9c>
 1b6:	b9 cf       	rjmp	.-142    	; 0x12a <main+0x16>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
