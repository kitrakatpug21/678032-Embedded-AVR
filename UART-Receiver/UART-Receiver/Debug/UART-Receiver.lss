
UART-Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000090  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000114  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b6  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053d  00000000  00000000  00000726  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001eb  00000000  00000000  00000c63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e1  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001155  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
    // Baud Rate (at 9600 for 8MHz Clock) Setup in UBRR
	DDRD = 0b00000010;
  6c:	82 e0       	ldi	r24, 0x02	; 2
  6e:	81 bb       	out	0x11, r24	; 17
	UBRRH = 0;
  70:	10 bc       	out	0x20, r1	; 32
	UBRRL = 51;
  72:	83 e3       	ldi	r24, 0x33	; 51
  74:	89 b9       	out	0x09, r24	; 9
	UCSRB = 0b00010000; // RXEN 
  76:	80 e1       	ldi	r24, 0x10	; 16
  78:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0b10100110; // URSEL Asynch Par-Ev St-1 Data-8
  7a:	86 ea       	ldi	r24, 0xA6	; 166
  7c:	80 bd       	out	0x20, r24	; 32
	DDRC = 0b11111111;
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	84 bb       	out	0x14, r24	; 20
	while (1) 
    {
		while ((UCSRA & 0b10000000)==0)
  82:	5f 9b       	sbis	0x0b, 7	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <main+0x16>
		{
			// we wait till the Receiving Buffer is not full
		}
		// once it is full, Upload the same data on PORTC
		PORTC = UDR;		 
  86:	8c b1       	in	r24, 0x0c	; 12
  88:	85 bb       	out	0x15, r24	; 21
    }
  8a:	fb cf       	rjmp	.-10     	; 0x82 <main+0x16>

0000008c <_exit>:
  8c:	f8 94       	cli

0000008e <__stop_program>:
  8e:	ff cf       	rjmp	.-2      	; 0x8e <__stop_program>
