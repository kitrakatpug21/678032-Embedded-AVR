
Temperature Sensor Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000644  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ac  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029c  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000013cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
	ADMUX = 0b01000011;
  6c:	83 e4       	ldi	r24, 0x43	; 67
  6e:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110;
  70:	86 e8       	ldi	r24, 0x86	; 134
  72:	86 b9       	out	0x06, r24	; 6
	DDRC = 0b00000111;
  74:	87 e0       	ldi	r24, 0x07	; 7
  76:	84 bb       	out	0x14, r24	; 20
	while (1)
	{
		ADCSRA = 0b11000110;
  78:	86 ec       	ldi	r24, 0xC6	; 198
  7a:	86 b9       	out	0x06, r24	; 6
		while ((ADCSRA & (1<<4))==0)
  7c:	34 9b       	sbis	0x06, 4	; 6
  7e:	fe cf       	rjmp	.-4      	; 0x7c <main+0x10>
		{
			//wait till conversion completes
		}
		if (ADC >= 62)
  80:	84 b1       	in	r24, 0x04	; 4
  82:	95 b1       	in	r25, 0x05	; 5
  84:	ce 97       	sbiw	r24, 0x3e	; 62
  86:	18 f0       	brcs	.+6      	; 0x8e <main+0x22>
		{
			//if temp > 30
			//Fan1 + Fan2 + Compressor
			PORTC = 0b00000111;
  88:	87 e0       	ldi	r24, 0x07	; 7
  8a:	85 bb       	out	0x15, r24	; 21
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <main+0x66>
		}
		else if (ADC < 62 && ADC >= 52)
  8e:	84 b1       	in	r24, 0x04	; 4
  90:	95 b1       	in	r25, 0x05	; 5
  92:	ce 97       	sbiw	r24, 0x3e	; 62
  94:	38 f4       	brcc	.+14     	; 0xa4 <main+0x38>
  96:	84 b1       	in	r24, 0x04	; 4
  98:	95 b1       	in	r25, 0x05	; 5
  9a:	c4 97       	sbiw	r24, 0x34	; 52
  9c:	18 f0       	brcs	.+6      	; 0xa4 <main+0x38>
		{
			//if 30 > temp > 25
			//Fan1 + compressor
			PORTC = 0b00000101;
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	85 bb       	out	0x15, r24	; 21
  a2:	17 c0       	rjmp	.+46     	; 0xd2 <main+0x66>
		}
		else if (ADC < 52 && ADC >= 41)
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	c4 97       	sbiw	r24, 0x34	; 52
  aa:	38 f4       	brcc	.+14     	; 0xba <main+0x4e>
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	95 b1       	in	r25, 0x05	; 5
  b0:	89 97       	sbiw	r24, 0x29	; 41
  b2:	18 f0       	brcs	.+6      	; 0xba <main+0x4e>
		{
			//if 25 > temp 20
			//Fan1 + Fan2
			PORTC = 0b00000110;
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	85 bb       	out	0x15, r24	; 21
  b8:	0c c0       	rjmp	.+24     	; 0xd2 <main+0x66>
		}
		else if (ADC < 41 && ADC >= 31)
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	95 b1       	in	r25, 0x05	; 5
  be:	89 97       	sbiw	r24, 0x29	; 41
  c0:	38 f4       	brcc	.+14     	; 0xd0 <main+0x64>
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	95 b1       	in	r25, 0x05	; 5
  c6:	4f 97       	sbiw	r24, 0x1f	; 31
  c8:	18 f0       	brcs	.+6      	; 0xd0 <main+0x64>
		{
			//if 20 > temp 15
			//Fan1
			PORTC = 0b00000100;
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	85 bb       	out	0x15, r24	; 21
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <main+0x66>
		}
		else
		{
			// everything off otherwise
			PORTC = 0b00000000;
  d0:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	80 e7       	ldi	r24, 0x70	; 112
  d6:	92 e0       	ldi	r25, 0x02	; 2
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x6c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x76>
  e2:	00 00       	nop
  e4:	c9 cf       	rjmp	.-110    	; 0x78 <main+0xc>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
