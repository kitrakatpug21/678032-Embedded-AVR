
Timer0 CTC (Frequency Generator) Mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b6  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053d  00000000  00000000  0000075a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000233  00000000  00000000  00000c97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000311  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001201  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#define F_CPU 8000000UL

int main(void)
{
	TCCR0 = 0b00011001;// CTC Mode (Toggle) Prescale by 1
  6c:	89 e1       	ldi	r24, 0x19	; 25
  6e:	83 bf       	out	0x33, r24	; 51
	DDRB = 0b00001000;
  70:	88 e0       	ldi	r24, 0x08	; 8
  72:	87 bb       	out	0x17, r24	; 23
	TCNT0 = 0;
  74:	12 be       	out	0x32, r1	; 50
	OCR0 = 1;
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	8c bf       	out	0x3c, r24	; 60
	while (1)
	{
		if (PINA & 0b00000001)
  7a:	c8 9b       	sbis	0x19, 0	; 25
  7c:	06 c0       	rjmp	.+12     	; 0x8a <main+0x1e>
		{
			TCCR0 = 0b00011001;// CTC Mode (Toggle) Prescale by 1
  7e:	89 e1       	ldi	r24, 0x19	; 25
  80:	83 bf       	out	0x33, r24	; 51
			TCNT0 = 0;
  82:	12 be       	out	0x32, r1	; 50
			OCR0 = 50;
  84:	82 e3       	ldi	r24, 0x32	; 50
  86:	8c bf       	out	0x3c, r24	; 60
  88:	17 c0       	rjmp	.+46     	; 0xb8 <main+0x4c>
		}
		else if (PINA & 0b00000010)
  8a:	c9 9b       	sbis	0x19, 1	; 25
  8c:	06 c0       	rjmp	.+12     	; 0x9a <main+0x2e>
		{
			TCCR0 = 0b00011001;// CTC Mode (Toggle) Prescale by 1
  8e:	89 e1       	ldi	r24, 0x19	; 25
  90:	83 bf       	out	0x33, r24	; 51
			TCNT0 = 0;
  92:	12 be       	out	0x32, r1	; 50
			OCR0 = 200;
  94:	88 ec       	ldi	r24, 0xC8	; 200
  96:	8c bf       	out	0x3c, r24	; 60
  98:	0f c0       	rjmp	.+30     	; 0xb8 <main+0x4c>
		}
		else if (PINA & 0b00000100)
  9a:	ca 9b       	sbis	0x19, 2	; 25
  9c:	06 c0       	rjmp	.+12     	; 0xaa <main+0x3e>
		{
			TCCR0 = 0b00011010;// CTC Mode (Toggle) Prescale by 8
  9e:	8a e1       	ldi	r24, 0x1A	; 26
  a0:	83 bf       	out	0x33, r24	; 51
			TCNT0 = 0;
  a2:	12 be       	out	0x32, r1	; 50
			OCR0 = 100;
  a4:	84 e6       	ldi	r24, 0x64	; 100
  a6:	8c bf       	out	0x3c, r24	; 60
  a8:	07 c0       	rjmp	.+14     	; 0xb8 <main+0x4c>
		}
		else if (PINA & 0b00001000)
  aa:	cb 9b       	sbis	0x19, 3	; 25
  ac:	05 c0       	rjmp	.+10     	; 0xb8 <main+0x4c>
		{
			TCCR0 = 0b00011011;// CTC Mode (Toggle) Prescale by 16
  ae:	8b e1       	ldi	r24, 0x1B	; 27
  b0:	83 bf       	out	0x33, r24	; 51
			TCNT0 = 0;
  b2:	12 be       	out	0x32, r1	; 50
			OCR0 = 100;
  b4:	84 e6       	ldi	r24, 0x64	; 100
  b6:	8c bf       	out	0x3c, r24	; 60
		}
		
		while ((TIFR & 0b00000010)==0)
  b8:	08 b6       	in	r0, 0x38	; 56
  ba:	01 fe       	sbrs	r0, 1
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <main+0x4c>
  be:	dd cf       	rjmp	.-70     	; 0x7a <main+0xe>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
